name: backport-workflow.yml
on:
  workflow_call:
    inputs:
      label:
        description: label triggering the workflow
        required: false
        type: string
      pull_request:
        description: previous workflow context
        required: true
        type: string

jobs:
  prepare:
    if: inputs.pull_request.merged
    runs-on: ubuntu-latest
    name: Prepare parameters
    steps:
      - name: Prepare variables
        env:
          PULL_REQUEST_EVENT: ${{ inputs.pull_request }}
        run: |
          echo "$GITHUB_EVENT_PATH"
          echo "$PULL_REQUEST_EVENT"
      - name: Prepare parameters
        id: prepare-parameters
        uses: actions/github-script@v7
        with:
          script: |
            const event = context.payload.action;
            let targets = [];
            
            if (event == "labeled") {
              const label = process.inputs.label;
              if (label.startsWith("backport-")){
                targets = [label.replace("backport-", "")];
              }
            } else if (event == "closed") {
              const labels = process.inputs.pull_request.labels.map(l => l.name)
              targets = labels
                .filter(l => l.startsWith("backport-"))
                .map(l => l.replace("backport-", ""))
            }
            core.setOutput("targets", JSON.stringify(targets));
    outputs:
      targets: ${{ steps.prepare-parameters.outputs.targets }}

  backport:
    if: needs.prepare.outputs.targets != '[]'
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix:
        target: ${{ fromJSON(needs.prepare.outputs.targets) }}
    name: Process backport
    steps:
      - name: Checkout target branch
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.target }}
          fetch-depth: 0
      - name: Create backport branch
        id: create-branch
        env:
          BACKPORT_SOURCE: ${{ inputs.pull_request.base.ref }}
          BACKPORT_BRANCH: backport/pr-${{ inputs.pull_request.number }}-${{ matrix.target }}
          MERGE_COMMIT: ${{ inputs.pull_request.merge_commit_sha }}
        run: |
          git config user.name "github-action"
          git config user.email "<>"

          git checkout -b $BACKPORT_BRANCH
          while read -r commit_sha; do
            if ! git cherry-pick "$commit_sha"; then
              echo "Conflict in $commit_sha"
              echo "conflict=true" >> $GITHUB_OUTPUT
              exit
            fi
          done <<< "$(git log --pretty=format:%H --reverse $MERGE_COMMIT^1..$MERGE_COMMIT^2)"
          git push origin $BACKPORT_BRANCH
      - name: Handle backport conflict
        if: steps.create-branch.outputs.conflict
        uses: actions/github-script@v7
        env:
          BACKPORT_TARGET: ${{ matrix.target }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Conflict creating backport branch for ${process.env.BACKPORT_TARGET}`
            })
      - name: Create pull request
        if: ${{ !steps.create-branch.outputs.conflict }}
        uses: actions/github-script@v7
        env:
          BACKPORT_BRANCH: backport/pr-${{ inputs.pull_request.number }}-${{ matrix.target }}
          BACKPORT_TARGET: ${{ matrix.target }}
        with:
          script: |
            const { repo, owner } = context.repo;
            const result = await github.rest.pulls.create({
              title: `Backport PR #${context.issue.number} to ${process.env.BACKPORT_TARGET}`,
              owner,
              repo,
              head: process.env.BACKPORT_BRANCH,
              base: process.env.BACKPORT_TARGET,
              body: 'This PR is auto-generated.'
            });

