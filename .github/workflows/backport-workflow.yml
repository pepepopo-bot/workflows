name: backport-workflow.yml
on:
  workflow_call:
    inputs:
      action:
          description: event action (labeled|closed)
          required: true
          type: string
      label:
          description: label triggering the workflow
          required: true
          type: string
      pull_request:
          description: previous workflow context
          required: true
          type: string

jobs:
  prepare:
    if: ${{ fromJSON(inputs.pull_request).merged }}
    runs-on: ubuntu-latest
    name: Prepare parameters
    steps:
      - name: Prepare variables
        env:
          PULL_REQUEST_EVENT: ${{ inputs.pull_request }}
        run: |
          echo "$GITHUB_EVENT_PATH"
          echo "$PULL_REQUEST_EVENT"
      - name: Prepare parameters
        id: prepare-parameters
        uses: actions/github-script@v7
        env:
          ACTION: ${{ inputs.action }}
          LABEL: ${{ inputs.label }}
          PR_JSON: ${{ inputs.pull_request }}
        with:
          script: |
            const action = process.env.ACTION;
            let targets = [];
      
            if (action === "labeled") {
              const label = process.env.LABEL;
              if (label && label.startsWith("backport-")) {
                targets = [label.replace("backport-", "")];
              }
            } else if (action === "closed") {
              const pr = JSON.parse(process.env.PR_JSON);
              const labels = pr.labels.map(l => l.name);
              targets = labels
                .filter(l => l.startsWith("backport-"))
                .map(l => l.replace("backport-", ""));
            }
      
            core.setOutput("targets", JSON.stringify(targets));
            outputs:
              targets: ${{ steps.prepare-parameters.outputs.targets }}

  backport:
    if: ${{ needs.prepare.outputs.targets != '[]' }}
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix:
        target: ${{ fromJSON(needs.prepare.outputs.targets) }}
    name: Backport to ${{ matrix.target }}
    steps:
    - name: Checkout target branch
      uses: actions/checkout@v4
      with:
        ref: ${{ matrix.target }}
        fetch-depth: 0
    
    - name: Create backport branch
      id: create-branch
      env:
        BACKPORT_SOURCE: ${{ fromJSON(inputs.pull_request).base.ref }}
        BACKPORT_BRANCH: backport/pr-${{ fromJSON(inputs.pull_request).number }}-${{ matrix.target }}
        MERGE_COMMIT: ${{ fromJSON(inputs.pull_request).merge_commit_sha }}
      run: |
        git config user.name "github-action"
        git config user.email "<>"
    
        git checkout -b $BACKPORT_BRANCH
        while read -r commit_sha; do
          if ! git cherry-pick "$commit_sha"; then
            echo "conflict=true" >> $GITHUB_OUTPUT
            exit
          fi
        done <<< "$(git log --pretty=format:%H --reverse $MERGE_COMMIT^1..$MERGE_COMMIT^2)"
        git push origin $BACKPORT_BRANCH
    
    - name: Handle backport conflict
      if: steps.create-branch.outputs.conflict
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `Conflict creating backport branch for ${process.env.BACKPORT_TARGET}`
          })
    
    - name: Create backport pull request
      if: ${{ !steps.create-branch.outputs.conflict }}
      uses: actions/github-script@v7
      env:
        BACKPORT_BRANCH: backport/pr-${{ fromJSON(inputs.pull_request).number }}-${{ matrix.target }}
        BACKPORT_TARGET: ${{ matrix.target }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { repo, owner } = context.repo;
          await github.rest.pulls.create({
            title: `Backport PR #${fromJSON(inputs.pull_request).number} to ${process.env.BACKPORT_TARGET}`,
            owner,
            repo,
            head: process.env.BACKPORT_BRANCH,
            base: process.env.BACKPORT_TARGET,
            body: 'This PR was automatically created by a backport workflow.'
          });
