name: backport-workflow.yml
on:
  workflow_call:
    inputs:
      event:
        description: Event triggering caller workflow
        required: true
        type: string
      label:
        description: Label associated with label event
        required: true
        type: string
      pull_request:
        description: Associated pull_request event
        required: true
        type: string

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Prepare parameters
        id: prepare-parameters
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.1
        env:
          EVENT: ${{ inputs.event }}
          LABEL: ${{ inputs.label }}
          PULL_REQUEST: ${{ inputs.pull_request }}
        with:
          script: |
            const event = process.env.EVENT;
            let targets = [];

            if (event === "labeled") {
              const label = process.env.LABEL;
              if (label && label.startsWith("backport-")) {
                targets = [label.replace("backport-", "")];
              }
            } else if (event === "closed") {
              const pr = JSON.parse(process.env.PULL_REQUEST);
              const labels = pr.labels.map(l => l.name);
              targets = labels
                .filter(l => l.startsWith("backport-"))
                .map(l => l.replace("backport-", ""));
            }

            core.setOutput("targets", JSON.stringify(targets));
    outputs:
      targets: ${{ steps.prepare-parameters.outputs.targets }}

  backport:
    if: ${{ needs.prepare.outputs.targets != '[]' }}
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix:
        target: ${{ fromJSON(needs.prepare.outputs.targets) }}
    steps:
      - name: Checkout target branch
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5.0.0
        with:
          ref: ${{ matrix.target }}
          fetch-depth: 0

      - name: Create backport branch
        id: create-branch
        env:
          BACKPORT_SOURCE: ${{ fromJSON(inputs.pull_request).base.ref }}
          BACKPORT_BRANCH: backport/pr-${{ fromJSON(inputs.pull_request).number }}-${{ matrix.target }}
          MERGE_COMMIT: ${{ fromJSON(inputs.pull_request).merge_commit_sha }}
        run: |
          git config user.name "github-action"
          git config user.email "<>"

          git checkout -b $BACKPORT_BRANCH
          while read -r commit_sha; do
            if ! git cherry-pick "$commit_sha"; then
              echo "conflict=true" >> $GITHUB_OUTPUT
              exit
            fi
          done <<< "$(git log --pretty=format:%H --reverse $MERGE_COMMIT^1..$MERGE_COMMIT^2)"
          git push origin $BACKPORT_BRANCH

      - name: Handle backport conflict
        if: steps.create-branch.outputs.conflict
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.1
        env:
          BACKPORT_TARGET: ${{ matrix.target }}
          PR_NUMBER: ${{ fromJSON(inputs.pull_request).number }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: parseInt(process.env.PR_NUMBER, 10),
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Conflict creating backport branch for ${process.env.BACKPORT_TARGET}`
            })

      - name: Create backport pull request
        if: ${{ !steps.create-branch.outputs.conflict }}
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.1
        env:
          BACKPORT_BRANCH: backport/pr-${{ fromJSON(inputs.pull_request).number }}-${{ matrix.target }}
          BACKPORT_TARGET: ${{ matrix.target }}
          PR_NUMBER: ${{ fromJSON(inputs.pull_request).number }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { repo, owner } = context.repo;
            await github.rest.pulls.create({
              title: `Backport PR #${process.env.PR_NUMBER} to ${process.env.BACKPORT_TARGET}`,
              owner,
              repo,
              head: process.env.BACKPORT_BRANCH,
              base: process.env.BACKPORT_TARGET,
              body: 'This PR is auto-generated as a backport of #${process.env.PR_NUMBER}.'
            });
